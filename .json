{
  "openapi": "3.1.0",
  "info": {
    "title": "ðŸš€ PromptForge.ai API",
    "description": "PromptForge.ai API with Firebase Authentication",
    "version": "7.0.0-production-ready"
  },
  "paths": {
    "/api/v1/debug/auth-headers": {
      "get": {
        "tags": [
          "Debug",
          "Debug"
        ],
        "summary": "Debug Auth Headers",
        "description": "Debug endpoint to see exactly what headers are being received",
        "operationId": "debug_auth_headers_api_v1_debug_auth_headers_get",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Authorization"
            }
          },
          {
            "name": "x-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Api-Key"
            }
          },
          {
            "name": "user-agent",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User-Agent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/debug/test-auth": {
      "post": {
        "tags": [
          "Debug",
          "Debug"
        ],
        "summary": "Test Auth With Mock",
        "description": "Test endpoint that should work with mock-test-token",
        "operationId": "test_auth_with_mock_api_v1_debug_test_auth_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/prompts/prompts/arsenal": {
      "get": {
        "tags": [
          "Prompts",
          "Prompts"
        ],
        "summary": "Get User Arsenal",
        "description": "Fetch a paginated list of the user's prompts from MongoDB.",
        "operationId": "get_user_arsenal_api_v1_prompts_prompts_arsenal_get",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Search term for prompt titles",
              "title": "Search"
            },
            "description": "Search term for prompt titles"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter prompts by status",
              "title": "Status"
            },
            "description": "Filter prompts by status"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Number of prompts to return",
              "default": 10,
              "title": "Limit"
            },
            "description": "Number of prompts to return"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Number of prompts to skip",
              "default": 0,
              "title": "Offset"
            },
            "description": "Number of prompts to skip"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/prompts/prompts/": {
      "post": {
        "tags": [
          "Prompts",
          "Prompts"
        ],
        "summary": "Create New Prompt",
        "description": "Creates a new prompt and its first version.",
        "operationId": "create_new_prompt_api_v1_prompts_prompts__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SavePromptRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/prompts/prompts/test-drive-by-id": {
      "post": {
        "tags": [
          "Prompts",
          "Prompts"
        ],
        "summary": "Test Drive Prompt By Id",
        "description": "Test a prompt by its ID with user inputs; debit credits atomically in Mongo.",
        "operationId": "test_drive_prompt_by_id_api_v1_prompts_prompts_test_drive_by_id_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestDriveByIdRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/prompts/prompts/{prompt_id}": {
      "get": {
        "tags": [
          "Prompts",
          "Prompts"
        ],
        "summary": "Get Prompt Details",
        "description": "Fetch prompt and latest version.",
        "operationId": "get_prompt_details_api_v1_prompts_prompts__prompt_id__get",
        "parameters": [
          {
            "name": "prompt_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Prompt Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Prompts",
          "Prompts"
        ],
        "summary": "Delete Prompt",
        "description": "Delete prompt and all its versions.",
        "operationId": "delete_prompt_api_v1_prompts_prompts__prompt_id__delete",
        "parameters": [
          {
            "name": "prompt_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Prompt Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Prompts",
          "Prompts"
        ],
        "summary": "Update Prompt",
        "description": "Create a new version and update prompt metadata.",
        "operationId": "update_prompt_api_v1_prompts_prompts__prompt_id__put",
        "parameters": [
          {
            "name": "prompt_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Prompt Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePromptRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/prompts/prompts/public": {
      "get": {
        "tags": [
          "Prompts",
          "Prompts"
        ],
        "summary": "Get Public Prompts",
        "description": "Paginated list of public prompts from marketplace_listings.",
        "operationId": "get_public_prompts_api_v1_prompts_prompts_public_get",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Search term for prompt titles",
              "title": "Search"
            },
            "description": "Search term for prompt titles"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Number of prompts to return",
              "default": 10,
              "title": "Limit"
            },
            "description": "Number of prompts to return"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Number of prompts to skip",
              "default": 0,
              "title": "Offset"
            },
            "description": "Number of prompts to skip"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/prompts/prompts/{prompt_id}/versions": {
      "get": {
        "tags": [
          "Prompts",
          "Prompts"
        ],
        "summary": "Get Prompt Versions",
        "description": "Fetch a prompt's version history.",
        "operationId": "get_prompt_versions_api_v1_prompts_prompts__prompt_id__versions_get",
        "parameters": [
          {
            "name": "prompt_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Prompt Id"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Number of versions to return",
              "default": 10,
              "title": "Limit"
            },
            "description": "Number of versions to return"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Number of versions to skip",
              "default": 0,
              "title": "Offset"
            },
            "description": "Number of versions to skip"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/prompts/prompts/bulk-action": {
      "post": {
        "tags": [
          "Prompts",
          "Prompts"
        ],
        "summary": "Bulk Prompt Action",
        "description": "Perform bulk actions on multiple prompts.",
        "operationId": "bulk_prompt_action_api_v1_prompts_prompts_bulk_action_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/ai/remix-prompt": {
      "post": {
        "tags": [
          "AI Features",
          "AI Features"
        ],
        "summary": "Remix Prompt",
        "description": "Improve a prompt with the LLM; debit credits; log usage.",
        "operationId": "remix_prompt_api_v1_ai_remix_prompt_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemixRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/ai/architect-prompt": {
      "post": {
        "tags": [
          "AI Features",
          "AI Features"
        ],
        "summary": "Architect Prompt",
        "description": "Generate a production-grade architecture breakdown via ArchitectService.",
        "operationId": "architect_prompt_api_v1_ai_architect_prompt_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArchitectRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/ai/fuse-prompts": {
      "post": {
        "tags": [
          "AI Features",
          "AI Features"
        ],
        "summary": "Fuse Prompts",
        "description": "Fuse two prompts using the LLM; debit credits; log usage.",
        "operationId": "fuse_prompts_api_v1_ai_fuse_prompts_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FusionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/ai/generate-enhanced-prompt": {
      "post": {
        "tags": [
          "AI Features",
          "AI Features"
        ],
        "summary": "Generate Enhanced Prompt",
        "description": "Enhanced prompt generation via Brain Engine (MVP integration).",
        "operationId": "generate_enhanced_prompt_api_v1_ai_generate_enhanced_prompt_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FusionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/ai/analyze-prompt": {
      "post": {
        "tags": [
          "AI Features",
          "AI Features"
        ],
        "summary": "Analyze Prompt",
        "description": "Analyze prompt/code/file/url via Brain Engine (MVP integration).",
        "operationId": "analyze_prompt_api_v1_ai_analyze_prompt_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KillSwitchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/marketplace/search": {
      "get": {
        "tags": [
          "marketplace",
          "marketplace"
        ],
        "summary": "Search Marketplace",
        "description": "Search public marketplace prompts by text or tag.",
        "operationId": "search_marketplace_api_v1_marketplace_search_get",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Search text",
              "title": "Q"
            },
            "description": "Search text"
          },
          {
            "name": "tag",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Tag filter",
              "title": "Tag"
            },
            "description": "Tag filter"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/marketplace/my-listings": {
      "get": {
        "tags": [
          "marketplace",
          "marketplace"
        ],
        "summary": "Get My Marketplace Listings",
        "description": "Fetch current user's active marketplace listings (Mongo).",
        "operationId": "get_my_marketplace_listings_api_v1_marketplace_my_listings_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/marketplace/{id}": {
      "get": {
        "tags": [
          "marketplace",
          "marketplace"
        ],
        "summary": "Get Public Prompt Details",
        "description": "Fetch public prompt details by ID (listing or prompt ID).",
        "operationId": "get_public_prompt_details_api_v1_marketplace__id__get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/marketplace/list-prompt": {
      "post": {
        "tags": [
          "marketplace",
          "marketplace"
        ],
        "summary": "List Prompt In Marketplace",
        "description": "List a packaged prompt in the marketplace.",
        "operationId": "list_prompt_in_marketplace_api_v1_marketplace_list_prompt_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarketplaceListingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/marketplace/listings": {
      "get": {
        "tags": [
          "marketplace",
          "marketplace"
        ],
        "summary": "Get Marketplace Listings",
        "description": "Get marketplace listings with filters (Mongo-only).",
        "operationId": "get_marketplace_listings_api_v1_marketplace_listings_get",
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Category"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(recent|popular|price)$",
              "default": "recent",
              "title": "Sort By"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Per Page"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/marketplace/preview/{prompt_id}": {
      "get": {
        "tags": [
          "marketplace",
          "marketplace"
        ],
        "summary": "Preview Marketplace Item",
        "operationId": "preview_marketplace_item_api_v1_marketplace_preview__prompt_id__get",
        "parameters": [
          {
            "name": "prompt_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Prompt Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/marketplace/rate": {
      "post": {
        "tags": [
          "marketplace",
          "marketplace"
        ],
        "summary": "Rate Marketplace Prompt",
        "description": "Rate and review a marketplace prompt (Mongo-only, idempotent per user/prompt).",
        "operationId": "rate_marketplace_prompt_api_v1_marketplace_rate_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromptRatingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/marketplace/{prompt_id}/reviews": {
      "get": {
        "tags": [
          "marketplace",
          "marketplace"
        ],
        "summary": "List Marketplace Reviews",
        "operationId": "list_marketplace_reviews_api_v1_marketplace__prompt_id__reviews_get",
        "parameters": [
          {
            "name": "prompt_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Prompt Id"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Per Page"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/marketplace/{prompt_id}/analytics": {
      "get": {
        "tags": [
          "marketplace",
          "marketplace"
        ],
        "summary": "Get Marketplace Prompt Analytics",
        "operationId": "get_marketplace_prompt_analytics_api_v1_marketplace__prompt_id__analytics_get",
        "parameters": [
          {
            "name": "prompt_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Prompt Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/users/me/profile": {
      "put": {
        "tags": [
          "users",
          "Users",
          "users"
        ],
        "summary": "Update Profile",
        "operationId": "update_profile_api_v1_users_me_profile_put",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/users/auth/complete": {
      "post": {
        "tags": [
          "users",
          "Users",
          "users"
        ],
        "summary": "Auth Complete",
        "description": "Idempotent onboarding: upsert user doc, seed defaults if first login.\nFrontend must pass Bearer Firebase ID token.",
        "operationId": "auth_complete_api_v1_users_auth_complete_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/users/me": {
      "get": {
        "tags": [
          "users",
          "Users",
          "users"
        ],
        "summary": "Get Me",
        "operationId": "get_me_api_v1_users_me_get",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/users/credits": {
      "get": {
        "tags": [
          "users",
          "Users"
        ],
        "summary": "Get User Credits",
        "description": "Fetch user's available credits (Mongo) with analytics tracking.",
        "operationId": "get_user_credits_api_v1_users_credits_get",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/users/profile": {
      "put": {
        "tags": [
          "users",
          "Users",
          "users"
        ],
        "summary": "Update User Profile",
        "description": "Update user profile information (sanitized, whitelisted, profile subdoc only).",
        "operationId": "update_user_profile_api_v1_users_profile_put",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/users/export-data": {
      "get": {
        "tags": [
          "users",
          "Users",
          "users"
        ],
        "summary": "Export User Data",
        "description": "Export all user data in JSON format (GDPR-style).",
        "operationId": "export_user_data_api_v1_users_export_data_get",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/users/account": {
      "delete": {
        "tags": [
          "users",
          "Users",
          "users"
        ],
        "summary": "Delete User Account",
        "description": "Permanently delete user account and associated data (anonymize purchases).",
        "operationId": "delete_user_account_api_v1_users_account_delete",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/users/preferences": {
      "get": {
        "tags": [
          "users",
          "Users",
          "users"
        ],
        "summary": "Get User Preferences",
        "description": "Get user preferences and settings (Mongo-only).",
        "operationId": "get_user_preferences_api_v1_users_preferences_get",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "users",
          "Users",
          "users"
        ],
        "summary": "Update User Preferences",
        "description": "Update user preferences and settings (Mongo-only).",
        "operationId": "update_user_preferences_api_v1_users_preferences_put",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Preferences"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/users/stats": {
      "get": {
        "tags": [
          "users",
          "Users",
          "users"
        ],
        "summary": "Get User Stats",
        "description": "Get high-level user statistics.",
        "operationId": "get_user_stats_api_v1_users_stats_get",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/users/me/usage": {
      "get": {
        "tags": [
          "users",
          "Users",
          "users"
        ],
        "summary": "Get My Usage",
        "description": "Return usage summary and recent events for the logged-in user.",
        "operationId": "get_my_usage_api_v1_users_me_usage_get",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/users/usage/track": {
      "post": {
        "tags": [
          "users",
          "Users",
          "users"
        ],
        "summary": "Track Usage Event",
        "description": "Endpoint for extensions/clients to log usage events.",
        "operationId": "track_usage_event_api_v1_users_usage_track_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Event"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/packaging/{prompt_id}/package": {
      "post": {
        "tags": [
          "Packaging"
        ],
        "summary": "Package Prompt For Marketplace",
        "operationId": "package_prompt_for_marketplace_api_v1_packaging__prompt_id__package_post",
        "parameters": [
          {
            "name": "prompt_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Prompt Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PackageCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/packaging/": {
      "get": {
        "tags": [
          "Packaging"
        ],
        "summary": "List User Packages",
        "operationId": "list_user_packages_api_v1_packaging__get",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          },
          {
            "name": "marketplace",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Marketplace"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "created_at",
              "title": "Sort By"
            }
          },
          {
            "name": "sort_order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "desc",
              "title": "Sort Order"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/packaging/manage-bulk": {
      "post": {
        "tags": [
          "Packaging"
        ],
        "summary": "Manage Packages Bulk",
        "description": "Bulk package ops: publish, unpublish, update pricing, delete. (Mongo-only)",
        "operationId": "manage_packages_bulk_api_v1_packaging_manage_bulk_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PackageManagementRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/packaging/analytics": {
      "get": {
        "tags": [
          "Packaging"
        ],
        "summary": "Get Package Analytics",
        "description": "Package performance analytics and insights. (Mongo-only)",
        "operationId": "get_package_analytics_api_v1_packaging_analytics_get",
        "parameters": [
          {
            "name": "timeframe",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Analytics timeframe (7d, 30d, 90d, 1y)",
              "default": "30d",
              "title": "Timeframe"
            },
            "description": "Analytics timeframe (7d, 30d, 90d, 1y)"
          },
          {
            "name": "package_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Specific package analytics",
              "title": "Package Id"
            },
            "description": "Specific package analytics"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/partnerships/request": {
      "post": {
        "tags": [
          "Partnerships"
        ],
        "summary": "Request Partnership Enhanced",
        "description": "Enhanced partnership application â€” Mongo-native.",
        "operationId": "request_partnership_enhanced_api_v1_partnerships_request_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartnershipApplicationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/partnerships/revenue": {
      "post": {
        "tags": [
          "Partnerships"
        ],
        "summary": "Manage Partner Revenue",
        "description": "Partner revenue management â€” payout requests, payout method, summary, tax report.",
        "operationId": "manage_partner_revenue_api_v1_partnerships_revenue_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartnerRevenueRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/partnerships/dashboard": {
      "get": {
        "tags": [
          "Partnerships"
        ],
        "summary": "Get Partner Dashboard",
        "description": "Partner dashboard analytics â€” Mongo-native.",
        "operationId": "get_partner_dashboard_api_v1_partnerships_dashboard_get",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartnerDashboardRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/analytics/events": {
      "post": {
        "tags": [
          "Analytics"
        ],
        "summary": "Log Analytics Events",
        "description": "Receive and log analytics events from VS Code extension and other clients.",
        "operationId": "log_analytics_events_api_v1_analytics_events_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object",
                "title": "Events Data"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/analytics/performance": {
      "post": {
        "tags": [
          "Analytics"
        ],
        "summary": "Log Performance Metrics",
        "description": "Receive and log web/app vitals from the frontend (CLS, FCP, LCP, etc.).",
        "operationId": "log_performance_metrics_api_v1_analytics_performance_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object",
                "title": "Metrics"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/analytics/dashboard": {
      "get": {
        "tags": [
          "Analytics"
        ],
        "summary": "Get Analytics Dashboard",
        "description": "Get a comprehensive analytics dashboard.\nPro users get full analytics, free users get limited/basic stats.",
        "operationId": "get_analytics_dashboard_api_v1_analytics_dashboard_get",
        "parameters": [
          {
            "name": "range",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "30d",
              "title": "Range"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/analytics/exports/prompts": {
      "post": {
        "tags": [
          "Analytics"
        ],
        "summary": "Export Prompts Data",
        "description": "Export user's prompt data in CSV/JSON/XLSX (XLSX returned as CSV for now).\nMongo-only queries against db['prompts'].",
        "operationId": "export_prompts_data_api_v1_analytics_exports_prompts_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/analytics/exports/analytics": {
      "post": {
        "tags": [
          "Analytics"
        ],
        "summary": "Export Analytics Data",
        "description": "Export comprehensive analytics data (Mongo-only). Pro users only.",
        "operationId": "export_analytics_data_api_v1_analytics_exports_analytics_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/analytics/jobs/analytics": {
      "post": {
        "tags": [
          "Analytics"
        ],
        "summary": "Create Analytics Job",
        "description": "Create background analytics processing job (Mongo-only). Pro users only.",
        "operationId": "create_analytics_job_api_v1_analytics_jobs_analytics_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnalyticsJobRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/analytics/jobs/analytics/{job_id}/status": {
      "get": {
        "tags": [
          "Analytics"
        ],
        "summary": "Get Analytics Job Status",
        "description": "Get status of analytics background job (Mongo-only).",
        "operationId": "get_analytics_job_status_api_v1_analytics_jobs_analytics__job_id__status_get",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/projects/{project_id}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get Project Details",
        "description": "Get detailed information about a specific project (Mongo-only).",
        "operationId": "get_project_details_api_v1_projects__project_id__get",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Project Id"
            }
          },
          {
            "name": "include_prompts",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Include project prompts",
              "default": false,
              "title": "Include Prompts"
            },
            "description": "Include project prompts"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Delete Project",
        "description": "Delete a project and optionally handle associated prompts (Mongo-only).",
        "operationId": "delete_project_api_v1_projects__project_id__delete",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Project Id"
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Force delete even if project has prompts",
              "default": false,
              "title": "Force"
            },
            "description": "Force delete even if project has prompts"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/projects/{project_id}/prompts": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get Project Prompts",
        "description": "Get prompts in a project with pagination & sorting (Mongo-only).",
        "operationId": "get_project_prompts_api_v1_projects__project_id__prompts_get",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Project Id"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Items per page",
              "default": 20,
              "title": "Limit"
            },
            "description": "Items per page"
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort field: created_at, updated_at, title, uses",
              "default": "updated_at",
              "title": "Sort By"
            },
            "description": "Sort field: created_at, updated_at, title, uses"
          },
          {
            "name": "sort_order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort order: asc, desc",
              "default": "desc",
              "title": "Sort Order"
            },
            "description": "Sort order: asc, desc"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Manage Project Prompts",
        "description": "Add, remove, or reorder prompts in a project. (Mongo-only)",
        "operationId": "manage_project_prompts_api_v1_projects__project_id__prompts_post",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Project Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectPromptRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/notifications/{notification_id}/read": {
      "put": {
        "tags": [
          "Notifications"
        ],
        "summary": "Mark Notification Read",
        "description": "Mark a single notification as read.",
        "operationId": "mark_notification_read_api_v1_notifications__notification_id__read_put",
        "parameters": [
          {
            "name": "notification_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Notification Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/notifications/mark-all-read": {
      "post": {
        "tags": [
          "Notifications"
        ],
        "summary": "Mark All Notifications Read",
        "description": "Mark all notifications as read for the user.",
        "operationId": "mark_all_notifications_read_api_v1_notifications_mark_all_read_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/billing/tiers": {
      "get": {
        "tags": [
          "billing"
        ],
        "summary": "Get Billing Tiers",
        "operationId": "get_billing_tiers_api_v1_billing_tiers_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/billing/me/entitlements": {
      "get": {
        "tags": [
          "billing"
        ],
        "summary": "Get Me Entitlements",
        "description": "Returns the current user's plan, credits, caps, burst, and allowed routes. Cached for 60s, invalidated on webhook.",
        "operationId": "get_me_entitlements_api_v1_billing_me_entitlements_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/payments/initiate-payment": {
      "post": {
        "tags": [
          "Payments",
          "Payments"
        ],
        "summary": "Initiate Payment",
        "description": "Initiate payment: Select provider based on user country (Razorpay for India, Paddle for others).\nReturns the provider and a real payment link. Supports both Pro and Team plans.",
        "operationId": "initiate_payment_api_v1_payments_initiate_payment_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/payments/webhooks/health": {
      "get": {
        "tags": [
          "webhooks",
          "health"
        ],
        "summary": "Health",
        "operationId": "health_api_v1_payments_webhooks_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/payments/webhooks/payments/webhooks/paddle": {
      "post": {
        "tags": [
          "webhooks",
          "webhooks"
        ],
        "summary": "Paddle Webhook",
        "operationId": "paddle_webhook_api_v1_payments_webhooks_payments_webhooks_paddle_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/payments/webhooks/payments/webhooks/razorpay": {
      "post": {
        "tags": [
          "webhooks",
          "webhooks"
        ],
        "summary": "Razorpay Webhook",
        "operationId": "razorpay_webhook_api_v1_payments_webhooks_payments_webhooks_razorpay_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/search/users": {
      "get": {
        "tags": [
          "search",
          "search"
        ],
        "summary": "Search Users",
        "description": "Search users by email or name (case-insensitive, paginated).",
        "operationId": "search_users_api_v1_search_users_get",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "Search term for user email or name",
              "title": "Query"
            },
            "description": "Search term for user email or name"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 10,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/search/": {
      "get": {
        "tags": [
          "search"
        ],
        "summary": "Global Search",
        "description": "Performs a global search across public prompts/listings and user profiles.",
        "operationId": "global_search_api_v1_search__get",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 3,
              "description": "The search query.",
              "title": "Q"
            },
            "description": "The search query."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/prompt/prompt/quick_upgrade": {
      "post": {
        "tags": [
          "Prompt Engine",
          "Brain Engine"
        ],
        "summary": "Quick Mode: Upgrade prompt (extension, low-latency)",
        "description": "Quickly upgrade a prompt using the Brain Engine (Quick Mode, extension/low-latency).",
        "operationId": "quick_upgrade_api_v1_prompt_prompt_quick_upgrade_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "explain",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Explain"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Payload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Quick Mode upgrade result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                },
                "example": {
                  "data": {
                    "upgraded": "\u003Cgod-tier prompt\u003E"
                  },
                  "message": "Prompt upgraded via Brain Engine"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/prompt/prompt/upgrade": {
      "post": {
        "tags": [
          "Prompt Engine",
          "Brain Engine"
        ],
        "summary": "Full Mode: Upgrade prompt (deep pipeline, Pro)",
        "description": "Upgrade a prompt using the Brain Engine (Full Mode, Pro, explainable pipeline).",
        "operationId": "full_upgrade_api_v1_prompt_prompt_upgrade_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "explain",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Explain"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Payload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Full Mode upgrade result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                },
                "example": {
                  "data": {
                    "upgraded": "\u003Cgod-tier prompt\u003E",
                    "plan": {
                      "nodes": [],
                      "edges": []
                    },
                    "diffs": "\u003Cunified diff\u003E",
                    "fidelity_score": 0.9,
                    "matched_entries": [
                      {
                        "id": "few_shot_prompting",
                        "score": 0.83
                      }
                    ]
                  },
                  "message": "Prompt upgraded via Brain Engine (Full Mode)"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/demon/route": {
      "post": {
        "tags": [
          "Demon Engine",
          "Demon Engine"
        ],
        "summary": "Route",
        "description": "Demon Engine unified entrypoint.\nParses PFCL, selects techniques from compendium.json, renders fragments,\nenforces contracts, and returns surface-shaped content.",
        "operationId": "route_api_v1_demon_route_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "explain",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Explain"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DemonRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DemonResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/demon/v2/upgrade": {
      "post": {
        "tags": [
          "Demon Engine",
          "Demon Engine"
        ],
        "summary": "Upgrade V2",
        "description": "Dynamic routing upgrade endpoint (intent Ã— client Ã— mode).\nBackward compatible: infers intent/client if missing.\nReturns surface-specific output contract and techniques.\nIf explain=true, returns plan, fidelity_score, matched_entries.\nLogs analytics and (if consented) before/after hashes.",
        "operationId": "upgrade_v2_api_v1_demon_v2_upgrade_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "explain",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Explain"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpgradeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpgradeResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/vault/vault/arsenal": {
      "get": {
        "tags": [
          "Prompt Vault",
          "Prompt Vault"
        ],
        "summary": "Get Arsenal",
        "description": "Alias for /vault/list: returns all prompts in the user's arsenal/vault.",
        "operationId": "get_arsenal_api_v1_vault_vault_arsenal_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/vault/vault/search": {
      "get": {
        "tags": [
          "Prompt Vault",
          "Prompt Vault"
        ],
        "summary": "Search Prompts",
        "description": "Search prompts in the user's vault by text, persona, or tag.",
        "operationId": "search_prompts_api_v1_vault_vault_search_get",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Search text",
              "title": "Q"
            },
            "description": "Search text"
          },
          {
            "name": "persona",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Persona filter",
              "title": "Persona"
            },
            "description": "Persona filter"
          },
          {
            "name": "tag",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Tag filter",
              "title": "Tag"
            },
            "description": "Tag filter"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/vault/vault/{prompt_id}/test-drive": {
      "post": {
        "tags": [
          "Prompt Vault",
          "Prompt Vault"
        ],
        "summary": "Test Drive Prompt",
        "description": "Test-drive a prompt by ID. (Stub: returns prompt content and mock result)",
        "operationId": "test_drive_prompt_api_v1_vault_vault__prompt_id__test_drive_post",
        "parameters": [
          {
            "name": "prompt_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Prompt Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/vault/vault/save": {
      "post": {
        "tags": [
          "Prompt Vault",
          "Prompt Vault"
        ],
        "summary": "Save Prompt",
        "operationId": "save_prompt_api_v1_vault_vault_save_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object",
                "title": "Payload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/vault/vault/list": {
      "get": {
        "tags": [
          "Prompt Vault",
          "Prompt Vault"
        ],
        "summary": "List Prompts",
        "operationId": "list_prompts_api_v1_vault_vault_list_get",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Q"
            }
          },
          {
            "name": "persona",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Persona"
            }
          },
          {
            "name": "tag",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Tag"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/vault/vault/{prompt_id}/versions": {
      "get": {
        "tags": [
          "Prompt Vault",
          "Prompt Vault"
        ],
        "summary": "Get Prompt Versions",
        "description": "Return all versions of a prompt. (Stub: returns current only unless versioning is implemented)",
        "operationId": "get_prompt_versions_api_v1_vault_vault__prompt_id__versions_get",
        "parameters": [
          {
            "name": "prompt_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Prompt Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/vault/vault/delete/{prompt_id}": {
      "delete": {
        "tags": [
          "Prompt Vault",
          "Prompt Vault"
        ],
        "summary": "Delete Prompt",
        "operationId": "delete_prompt_api_v1_vault_vault_delete__prompt_id__delete",
        "parameters": [
          {
            "name": "prompt_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Prompt Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/ideas/generate": {
      "post": {
        "tags": [
          "Ideas",
          "Ideas"
        ],
        "summary": "Generate Ideas",
        "description": "Generate innovative project ideas based on categories and complexity from the frontend.\nEnforces plan and credit limits.",
        "operationId": "generate_ideas_api_v1_ideas_generate_post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdeaGenerationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/admin/diagnostics": {
      "get": {
        "tags": [
          "Admin",
          "Admin"
        ],
        "summary": "Diagnostics",
        "description": "Returns backend health: Mongo/Redis status, DB name, user_id, collection counts.\nOnly accessible to users with the 'admin' role claim.",
        "operationId": "diagnostics_api_v1_admin_diagnostics_get",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/monitoring/health": {
      "get": {
        "tags": [
          "Monitoring",
          "Monitoring"
        ],
        "summary": "Health Check",
        "description": "Public health check endpoint",
        "operationId": "health_check_api_v1_monitoring_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/monitoring/health/detailed": {
      "get": {
        "tags": [
          "Monitoring",
          "Monitoring"
        ],
        "summary": "Detailed Health Check",
        "description": "Detailed health check for Pro users",
        "operationId": "detailed_health_check_api_v1_monitoring_health_detailed_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/monitoring/metrics": {
      "get": {
        "tags": [
          "Monitoring",
          "Monitoring"
        ],
        "summary": "Get Metrics",
        "description": "Get performance metrics",
        "operationId": "get_metrics_api_v1_monitoring_metrics_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/monitoring/trace/{request_id}": {
      "get": {
        "tags": [
          "Monitoring",
          "Monitoring"
        ],
        "summary": "Get Request Trace",
        "description": "Get detailed trace for a specific request",
        "operationId": "get_request_trace_api_v1_monitoring_trace__request_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "request_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Request Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/monitoring/circuit-breakers": {
      "get": {
        "tags": [
          "Monitoring",
          "Monitoring"
        ],
        "summary": "Get Circuit Breaker Status",
        "description": "Get circuit breaker status (Team plan and above)",
        "operationId": "get_circuit_breaker_status_api_v1_monitoring_circuit_breakers_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/monitoring/circuit-breakers/{breaker_name}/reset": {
      "post": {
        "tags": [
          "Monitoring",
          "Monitoring"
        ],
        "summary": "Reset Circuit Breaker",
        "description": "Reset a circuit breaker (Team plan and above)",
        "operationId": "reset_circuit_breaker_api_v1_monitoring_circuit_breakers__breaker_name__reset_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "breaker_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Breaker Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/credits/dashboard": {
      "get": {
        "tags": [
          "Credit Management",
          "Credit Management"
        ],
        "summary": "Get Credit Dashboard",
        "description": "Get comprehensive credit dashboard for current user",
        "operationId": "get_credit_dashboard_api_v1_credits_dashboard_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/credits/usage/history": {
      "get": {
        "tags": [
          "Credit Management",
          "Credit Management"
        ],
        "summary": "Get Usage History",
        "description": "Get detailed usage history",
        "operationId": "get_usage_history_api_v1_credits_usage_history_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 365,
              "minimum": 1,
              "default": 30,
              "title": "Days"
            }
          },
          {
            "name": "route",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Route"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/credits/analytics/routes": {
      "get": {
        "tags": [
          "Credit Management",
          "Credit Management"
        ],
        "summary": "Get Route Analytics",
        "description": "Get analytics broken down by API route",
        "operationId": "get_route_analytics_api_v1_credits_analytics_routes_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 365,
              "minimum": 1,
              "default": 30,
              "title": "Days"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/credits/predictions/usage": {
      "get": {
        "tags": [
          "Credit Management",
          "Credit Management"
        ],
        "summary": "Predict Usage",
        "description": "Predict future credit usage based on historical patterns",
        "operationId": "predict_usage_api_v1_credits_predictions_usage_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/credits/admin/overview": {
      "get": {
        "tags": [
          "Credit Management",
          "Credit Management"
        ],
        "summary": "Admin Credit Overview",
        "description": "Admin overview of credit system (Team+ only)",
        "operationId": "admin_credit_overview_api_v1_credits_admin_overview_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "f",
            "in": "query",
            "required": true,
            "schema": {
              "title": "F"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/performance/performance/dashboard": {
      "get": {
        "tags": [
          "Performance"
        ],
        "summary": "Get Performance Dashboard",
        "description": "Get comprehensive performance dashboard (Team+ only)",
        "operationId": "get_performance_dashboard_api_v1_performance_performance_dashboard_get",
        "parameters": [
          {
            "name": "hours",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 168,
              "minimum": 1,
              "default": 24,
              "title": "Hours"
            }
          },
          {
            "name": "f",
            "in": "query",
            "required": true,
            "schema": {
              "title": "F"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/performance/performance/slow-queries": {
      "get": {
        "tags": [
          "Performance"
        ],
        "summary": "Get Slow Queries",
        "description": "Get slow query analysis (Team+ only)",
        "operationId": "get_slow_queries_api_v1_performance_performance_slow_queries_get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 50,
              "title": "Limit"
            }
          },
          {
            "name": "f",
            "in": "query",
            "required": true,
            "schema": {
              "title": "F"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/performance/performance/cache-stats": {
      "get": {
        "tags": [
          "Performance"
        ],
        "summary": "Get Cache Statistics",
        "description": "Get cache performance statistics (Team+ only)",
        "operationId": "get_cache_statistics_api_v1_performance_performance_cache_stats_get",
        "parameters": [
          {
            "name": "f",
            "in": "query",
            "required": true,
            "schema": {
              "title": "F"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/performance/performance/optimize": {
      "post": {
        "tags": [
          "Performance"
        ],
        "summary": "Trigger Optimization",
        "description": "Trigger manual performance optimization (Team+ only)",
        "operationId": "trigger_optimization_api_v1_performance_performance_optimize_post",
        "parameters": [
          {
            "name": "f",
            "in": "query",
            "required": true,
            "schema": {
              "title": "F"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/performance/performance/cache": {
      "delete": {
        "tags": [
          "Performance"
        ],
        "summary": "Clear Cache",
        "description": "Clear performance cache (Team+ only)",
        "operationId": "clear_cache_api_v1_performance_performance_cache_delete",
        "parameters": [
          {
            "name": "f",
            "in": "query",
            "required": true,
            "schema": {
              "title": "F"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/performance/performance/health": {
      "get": {
        "tags": [
          "Performance"
        ],
        "summary": "Performance Health Check",
        "description": "Public performance health check",
        "operationId": "performance_health_check_api_v1_performance_performance_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/intelligence/analyze": {
      "post": {
        "tags": [
          "Prompt Intelligence"
        ],
        "summary": "Analyze Prompt",
        "description": "Analyze a prompt and get intelligent suggestions for improvement\n\nCost: 2 credits per analysis",
        "operationId": "analyze_prompt_api_v1_intelligence_analyze_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "explain",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Explain"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromptAnalysisRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptAnalysisResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/intelligence/suggestions/quick": {
      "get": {
        "tags": [
          "Prompt Intelligence"
        ],
        "summary": "Get Quick Suggestions",
        "description": "Get quick suggestions for a prompt without full analysis (free)",
        "operationId": "get_quick_suggestions_api_v1_intelligence_suggestions_quick_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "prompt_text",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 1000,
              "title": "Prompt Text"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/intelligence/templates/personalized": {
      "get": {
        "tags": [
          "Prompt Intelligence"
        ],
        "summary": "Get Personalized Templates",
        "description": "Get personalized prompt templates based on user's usage patterns",
        "operationId": "get_personalized_templates_api_v1_intelligence_templates_personalized_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Category"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "maximum": 20,
                  "minimum": 1
                },
                {
                  "type": "null"
                }
              ],
              "default": 10,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/intelligence/patterns/user": {
      "get": {
        "tags": [
          "Prompt Intelligence"
        ],
        "summary": "Get User Patterns",
        "description": "Get user's prompt usage patterns and preferences",
        "operationId": "get_user_patterns_api_v1_intelligence_patterns_user_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/intelligence/feedback": {
      "post": {
        "tags": [
          "Prompt Intelligence"
        ],
        "summary": "Submit Suggestion Feedback",
        "description": "Submit feedback on suggestion quality for machine learning improvement",
        "operationId": "submit_suggestion_feedback_api_v1_intelligence_feedback_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "analysis_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Analysis Id"
            }
          },
          {
            "name": "suggestion_index",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Suggestion Index"
            }
          },
          {
            "name": "helpful",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean",
              "title": "Helpful"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Comment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/intelligence/analytics/intelligence": {
      "get": {
        "tags": [
          "Prompt Intelligence"
        ],
        "summary": "Get Intelligence Analytics",
        "description": "Get analytics on prompt intelligence usage (Pro+ only)",
        "operationId": "get_intelligence_analytics_api_v1_intelligence_analytics_intelligence_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 30,
              "title": "Days"
            }
          },
          {
            "name": "f",
            "in": "query",
            "required": true,
            "schema": {
              "title": "F"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/context/analyze": {
      "post": {
        "tags": [
          "Context Intelligence"
        ],
        "summary": "Analyze Context",
        "description": "Perform comprehensive context analysis with intelligent suggestions\n\nCost: 3 credits per analysis",
        "operationId": "analyze_context_api_v1_context_analyze_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "explain",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Explain"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContextAnalysisRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContextAnalysisResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/context/quick-suggestions": {
      "post": {
        "tags": [
          "Context Intelligence"
        ],
        "summary": "Get Quick Context Suggestions",
        "description": "Get quick context-aware suggestions without full analysis (free)",
        "operationId": "get_quick_context_suggestions_api_v1_context_quick_suggestions_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuickContextRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/context/follow-up-questions": {
      "post": {
        "tags": [
          "Context Intelligence"
        ],
        "summary": "Generate Follow Up Questions",
        "description": "Generate intelligent follow-up questions to improve context\n\nCost: 1 credit per request",
        "operationId": "generate_follow_up_questions_api_v1_context_follow_up_questions_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "explain",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Explain"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_generate_follow_up_questions_api_v1_context_follow_up_questions_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/context/enhancement-templates": {
      "get": {
        "tags": [
          "Context Intelligence"
        ],
        "summary": "Get Enhancement Templates",
        "description": "Get templates for enhancing prompts in specific domains",
        "operationId": "get_enhancement_templates_api_v1_context_enhancement_templates_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "domain",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Domain"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/context/domain-insights": {
      "get": {
        "tags": [
          "Context Intelligence"
        ],
        "summary": "Get Domain Insights",
        "description": "Get insights about user's domain usage patterns (Pro+ only)",
        "operationId": "get_domain_insights_api_v1_context_domain_insights_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "f",
            "in": "query",
            "required": true,
            "schema": {
              "title": "F"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/extension/analyze-prompt": {
      "post": {
        "tags": [
          "Extension Intelligence"
        ],
        "summary": "Analyze Extension Prompt",
        "description": "Analyze prompt from Chrome extension with page context\n\nCost: 1 credit per analysis",
        "operationId": "analyze_extension_prompt_api_v1_extension_analyze_prompt_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "explain",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Explain"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtensionAnalysisRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/extension/suggestions/contextual": {
      "post": {
        "tags": [
          "Extension Intelligence"
        ],
        "summary": "Get Contextual Suggestions",
        "description": "Get contextual suggestions based on page content (free)",
        "operationId": "get_contextual_suggestions_api_v1_extension_suggestions_contextual_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_get_contextual_suggestions_api_v1_extension_suggestions_contextual_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/extension/enhance/selected-text": {
      "post": {
        "tags": [
          "Extension Intelligence"
        ],
        "summary": "Enhance Selected Text",
        "description": "Enhance selected text from webpage with context awareness\n\nCost: 2 credits per enhancement",
        "operationId": "enhance_selected_text_api_v1_extension_enhance_selected_text_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "explain",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Explain"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_enhance_selected_text_api_v1_extension_enhance_selected_text_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/extension/templates/smart": {
      "post": {
        "tags": [
          "Extension Intelligence"
        ],
        "summary": "Get Smart Templates",
        "description": "Get smart templates based on page context and user patterns",
        "operationId": "get_smart_templates_api_v1_extension_templates_smart_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_get_smart_templates_api_v1_extension_templates_smart_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/extension/extension/health": {
      "get": {
        "tags": [
          "Extension Intelligence"
        ],
        "summary": "Extension Health Check",
        "description": "Health check endpoint for Chrome extension",
        "operationId": "extension_health_check_api_v1_extension_extension_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/extension/extension/usage-stats": {
      "get": {
        "tags": [
          "Extension Intelligence"
        ],
        "summary": "Get Extension Usage Stats",
        "description": "Get usage statistics for extension dashboard",
        "operationId": "get_extension_usage_stats_api_v1_extension_extension_usage_stats_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/workflows/api/workflows/templates": {
      "get": {
        "tags": [
          "Smart Workflows",
          "Smart Workflows"
        ],
        "summary": "Get Workflow Templates",
        "description": "Get available workflow templates",
        "operationId": "get_workflow_templates_api_v1_workflows_api_workflows_templates_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Smart Workflows",
          "Smart Workflows"
        ],
        "summary": "Create Workflow Template",
        "description": "Create a new workflow template",
        "operationId": "create_workflow_template_api_v1_workflows_api_workflows_templates_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object",
                "title": "Template Data"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/workflows/api/workflows/templates/{template_id}": {
      "get": {
        "tags": [
          "Smart Workflows",
          "Smart Workflows"
        ],
        "summary": "Get Workflow Template",
        "description": "Get specific workflow template details",
        "operationId": "get_workflow_template_api_v1_workflows_api_workflows_templates__template_id__get",
        "parameters": [
          {
            "name": "template_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Template Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/workflows/api/workflows/start": {
      "post": {
        "tags": [
          "Smart Workflows",
          "Smart Workflows"
        ],
        "summary": "Start Workflow",
        "description": "Start a new workflow instance",
        "operationId": "start_workflow_api_v1_workflows_api_workflows_start_post",
        "parameters": [
          {
            "name": "explain",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Explain"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Workflow Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/workflows/api/workflows/status/{instance_id}": {
      "get": {
        "tags": [
          "Smart Workflows",
          "Smart Workflows"
        ],
        "summary": "Get Workflow Status",
        "description": "Get workflow execution status",
        "operationId": "get_workflow_status_api_v1_workflows_api_workflows_status__instance_id__get",
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Instance Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/workflows/api/workflows/results/{instance_id}": {
      "get": {
        "tags": [
          "Smart Workflows",
          "Smart Workflows"
        ],
        "summary": "Get Workflow Results",
        "description": "Get workflow execution results",
        "operationId": "get_workflow_results_api_v1_workflows_api_workflows_results__instance_id__get",
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Instance Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/workflows/api/workflows/control/{instance_id}/pause": {
      "post": {
        "tags": [
          "Smart Workflows",
          "Smart Workflows"
        ],
        "summary": "Pause Workflow",
        "description": "Pause a running workflow",
        "operationId": "pause_workflow_api_v1_workflows_api_workflows_control__instance_id__pause_post",
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Instance Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/workflows/api/workflows/control/{instance_id}/resume": {
      "post": {
        "tags": [
          "Smart Workflows",
          "Smart Workflows"
        ],
        "summary": "Resume Workflow",
        "description": "Resume a paused workflow",
        "operationId": "resume_workflow_api_v1_workflows_api_workflows_control__instance_id__resume_post",
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Instance Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/workflows/api/workflows/control/{instance_id}/cancel": {
      "post": {
        "tags": [
          "Smart Workflows",
          "Smart Workflows"
        ],
        "summary": "Cancel Workflow",
        "description": "Cancel a running workflow",
        "operationId": "cancel_workflow_api_v1_workflows_api_workflows_control__instance_id__cancel_post",
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Instance Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/workflows/api/workflows/my-workflows": {
      "get": {
        "tags": [
          "Smart Workflows",
          "Smart Workflows"
        ],
        "summary": "List User Workflows",
        "description": "List all workflows for the current user",
        "operationId": "list_user_workflows_api_v1_workflows_api_workflows_my_workflows_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/workflows/api/workflows/quick-start/content-creation": {
      "post": {
        "tags": [
          "Smart Workflows",
          "Smart Workflows"
        ],
        "summary": "Quick Start Content Creation",
        "description": "Quick start content creation workflow",
        "operationId": "quick_start_content_creation_api_v1_workflows_api_workflows_quick_start_content_creation_post",
        "parameters": [
          {
            "name": "explain",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Explain"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Content Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/workflows/api/workflows/quick-start/code-review": {
      "post": {
        "tags": [
          "Smart Workflows",
          "Smart Workflows"
        ],
        "summary": "Quick Start Code Review",
        "description": "Quick start code review workflow",
        "operationId": "quick_start_code_review_api_v1_workflows_api_workflows_quick_start_code_review_post",
        "parameters": [
          {
            "name": "explain",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Explain"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Code Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/workflows/api/workflows/analytics/usage": {
      "get": {
        "tags": [
          "Smart Workflows",
          "Smart Workflows"
        ],
        "summary": "Get Workflow Analytics",
        "description": "Get workflow usage analytics for the user",
        "operationId": "get_workflow_analytics_api_v1_workflows_api_workflows_analytics_usage_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/workflows/api/workflows/health": {
      "get": {
        "tags": [
          "Smart Workflows",
          "Smart Workflows"
        ],
        "summary": "Workflow Service Health",
        "description": "Check workflow service health",
        "operationId": "workflow_service_health_api_v1_workflows_api_workflows_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/": {
      "get": {
        "summary": "Root",
        "operationId": "root__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/health": {
      "get": {
        "summary": "Health",
        "operationId": "health_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v1/health": {
      "get": {
        "summary": "Health V1",
        "operationId": "health_v1_api_v1_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "APIResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status",
            "default": "success"
          },
          "data": {
            "anyOf": [
              {

              },
              {
                "type": "null"
              }
            ],
            "title": "Data"
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message"
          }
        },
        "type": "object",
        "title": "APIResponse"
      },
      "AnalyticsJobRequest": {
        "properties": {
          "job_type": {
            "type": "string",
            "title": "Job Type"
          },
          "parameters": {
            "additionalProperties": true,
            "type": "object",
            "title": "Parameters"
          },
          "job_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Job Name"
          },
          "priority": {
            "type": "integer",
            "title": "Priority",
            "default": 10
          },
          "notification_email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notification Email"
          },
          "retention_days": {
            "type": "integer",
            "title": "Retention Days",
            "default": 7
          }
        },
        "type": "object",
        "required": [
          "job_type",
          "parameters"
        ],
        "title": "AnalyticsJobRequest"
      },
      "ArchitectRequest": {
        "properties": {
          "description": {
            "type": "string",
            "title": "Description"
          },
          "techStack": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Techstack"
          },
          "architectureStyle": {
            "type": "string",
            "title": "Architecturestyle"
          }
        },
        "type": "object",
        "required": [
          "description",
          "techStack",
          "architectureStyle"
        ],
        "title": "ArchitectRequest"
      },
      "Body_enhance_selected_text_api_v1_extension_enhance_selected_text_post": {
        "properties": {
          "selected_text": {
            "type": "string",
            "maxLength": 3000,
            "minLength": 1,
            "title": "Selected Text"
          },
          "enhancement_type": {
            "type": "string",
            "pattern": "^(improve|summarize|expand|simplify|formalize)$",
            "title": "Enhancement Type",
            "default": "improve"
          },
          "page_context": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Page Context"
          }
        },
        "type": "object",
        "required": [
          "selected_text"
        ],
        "title": "Body_enhance_selected_text_api_v1_extension_enhance_selected_text_post"
      },
      "Body_generate_follow_up_questions_api_v1_context_follow_up_questions_post": {
        "properties": {
          "prompt_text": {
            "type": "string",
            "maxLength": 5000,
            "minLength": 1,
            "title": "Prompt Text"
          },
          "domain_hint": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Domain Hint"
          }
        },
        "type": "object",
        "required": [
          "prompt_text"
        ],
        "title": "Body_generate_follow_up_questions_api_v1_context_follow_up_questions_post"
      },
      "Body_get_contextual_suggestions_api_v1_extension_suggestions_contextual_post": {
        "properties": {
          "prompt_text": {
            "type": "string",
            "maxLength": 2000,
            "minLength": 1,
            "title": "Prompt Text"
          },
          "page_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Page Url"
          },
          "page_title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Page Title"
          },
          "selected_text": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Selected Text"
          }
        },
        "type": "object",
        "required": [
          "prompt_text"
        ],
        "title": "Body_get_contextual_suggestions_api_v1_extension_suggestions_contextual_post"
      },
      "Body_get_smart_templates_api_v1_extension_templates_smart_post": {
        "properties": {
          "page_context": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Page Context"
          },
          "task_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Task Type"
          }
        },
        "type": "object",
        "title": "Body_get_smart_templates_api_v1_extension_templates_smart_post"
      },
      "ContextAnalysisRequest": {
        "properties": {
          "prompt_text": {
            "type": "string",
            "maxLength": 10000,
            "minLength": 1,
            "title": "Prompt Text"
          },
          "domain_hints": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "maxItems": 5
              },
              {
                "type": "null"
              }
            ],
            "title": "Domain Hints"
          },
          "session_context": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Session Context"
          },
          "user_context": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Context"
          }
        },
        "type": "object",
        "required": [
          "prompt_text"
        ],
        "title": "ContextAnalysisRequest"
      },
      "ContextAnalysisResponse": {
        "properties": {
          "analysis_id": {
            "type": "string",
            "title": "Analysis Id"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          },
          "domain_analysis": {
            "additionalProperties": true,
            "type": "object",
            "title": "Domain Analysis"
          },
          "context_completeness": {
            "additionalProperties": true,
            "type": "object",
            "title": "Context Completeness"
          },
          "contextual_suggestions": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Contextual Suggestions"
          },
          "missing_information": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Missing Information"
          },
          "follow_up_questions": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Follow Up Questions"
          },
          "enhancement_suggestions": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Enhancement Suggestions"
          },
          "processing_time": {
            "type": "number",
            "title": "Processing Time"
          }
        },
        "type": "object",
        "required": [
          "analysis_id",
          "timestamp",
          "domain_analysis",
          "context_completeness",
          "contextual_suggestions",
          "missing_information",
          "follow_up_questions",
          "enhancement_suggestions",
          "processing_time"
        ],
        "title": "ContextAnalysisResponse"
      },
      "DemonRequest": {
        "properties": {
          "text": {
            "type": "string",
            "maxLength": 40000,
            "minLength": 1,
            "title": "Text"
          },
          "mode": {
            "type": "string",
            "enum": [
              "free",
              "pro"
            ],
            "title": "Mode",
            "default": "free"
          },
          "client": {
            "type": "string",
            "enum": [
              "web",
              "chrome",
              "vscode",
              "cursor",
              "agent"
            ],
            "title": "Client",
            "default": "web"
          },
          "intent": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Intent"
          },
          "meta": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Meta"
          },
          "explain": {
            "type": "boolean",
            "title": "Explain",
            "default": false
          },
          "stream": {
            "type": "boolean",
            "title": "Stream",
            "default": false
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "text"
        ],
        "title": "DemonRequest"
      },
      "DemonResponse": {
        "properties": {
          "request_id": {
            "type": "string",
            "title": "Request Id"
          },
          "content": {
            "additionalProperties": true,
            "type": "object",
            "title": "Content"
          },
          "matched_pipeline": {
            "type": "string",
            "title": "Matched Pipeline"
          },
          "engine_version": {
            "type": "string",
            "title": "Engine Version"
          },
          "plan": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Plan"
          },
          "final_prompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Final Prompt"
          },
          "ts": {
            "type": "string",
            "title": "Ts"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "request_id",
          "content",
          "matched_pipeline",
          "engine_version",
          "ts"
        ],
        "title": "DemonResponse"
      },
      "ExportRequest": {
        "properties": {
          "export_type": {
            "type": "string",
            "title": "Export Type"
          },
          "format": {
            "type": "string",
            "title": "Format",
            "default": "csv"
          },
          "date_range": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Date Range",
            "default": "30d"
          },
          "start_date": {
            "anyOf": [
              {

              },
              {
                "type": "null"
              }
            ],
            "title": "Start Date"
          },
          "end_date": {
            "anyOf": [
              {

              },
              {
                "type": "null"
              }
            ],
            "title": "End Date"
          },
          "filters": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filters"
          },
          "sort_by": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sort By",
            "default": "created_at"
          },
          "sort_order": {
            "type": "string",
            "title": "Sort Order",
            "default": "desc"
          },
          "limit": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit"
          },
          "include_columns": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Include Columns"
          },
          "exclude_columns": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Exclude Columns"
          }
        },
        "type": "object",
        "required": [
          "export_type"
        ],
        "title": "ExportRequest"
      },
      "ExtensionAnalysisRequest": {
        "properties": {
          "prompt_text": {
            "type": "string",
            "maxLength": 5000,
            "minLength": 1,
            "title": "Prompt Text"
          },
          "page_context": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Page Context"
          },
          "tab_info": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tab Info"
          },
          "quick_mode": {
            "type": "boolean",
            "title": "Quick Mode",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "prompt_text"
        ],
        "title": "ExtensionAnalysisRequest"
      },
      "FusionRequest": {
        "properties": {
          "prompt_a": {
            "type": "string",
            "title": "Prompt A"
          },
          "prompt_b": {
            "type": "string",
            "title": "Prompt B"
          }
        },
        "type": "object",
        "required": [
          "prompt_a",
          "prompt_b"
        ],
        "title": "FusionRequest"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "IdeaGenerationRequest": {
        "properties": {
          "categories": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Categories"
          },
          "complexity": {
            "type": "string",
            "title": "Complexity"
          },
          "pain_points": {
            "type": "string",
            "title": "Pain Points",
            "default": ""
          },
          "target_audience": {
            "type": "string",
            "title": "Target Audience"
          },
          "industry_context": {
            "type": "string",
            "title": "Industry Context"
          }
        },
        "type": "object",
        "required": [
          "categories",
          "complexity"
        ],
        "title": "IdeaGenerationRequest"
      },
      "KillSwitchRequest": {
        "properties": {
          "analysisType": {
            "type": "string",
            "title": "Analysistype"
          },
          "code": {
            "type": "string",
            "title": "Code"
          },
          "filename": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filename"
          }
        },
        "type": "object",
        "required": [
          "analysisType",
          "code"
        ],
        "title": "KillSwitchRequest"
      },
      "MarketplaceListingRequest": {
        "properties": {
          "prompt_id": {
            "type": "string",
            "title": "Prompt Id"
          },
          "price_credits": {
            "type": "integer",
            "title": "Price Credits"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "prompt_id",
          "price_credits",
          "description"
        ],
        "title": "MarketplaceListingRequest"
      },
      "PackageCreateRequest": {
        "properties": {
          "marketplace_ready": {
            "type": "boolean",
            "title": "Marketplace Ready",
            "default": false
          },
          "sales_copy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sales Copy"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags",
            "default": []
          },
          "price_usd": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Price Usd"
          },
          "sales_title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sales Title"
          }
        },
        "type": "object",
        "title": "PackageCreateRequest"
      },
      "PackageManagementRequest": {
        "properties": {
          "action": {
            "type": "string",
            "title": "Action"
          },
          "package_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Package Ids"
          },
          "new_price": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "New Price"
          },
          "bulk_tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bulk Tags"
          }
        },
        "type": "object",
        "required": [
          "action",
          "package_ids"
        ],
        "title": "PackageManagementRequest"
      },
      "PartnerDashboardRequest": {
        "properties": {
          "timeframe": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Timeframe",
            "default": "30d"
          },
          "include_analytics": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Include Analytics",
            "default": true
          },
          "include_revenue": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Include Revenue",
            "default": true
          },
          "start_date": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Date"
          },
          "end_date": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "End Date"
          }
        },
        "type": "object",
        "title": "PartnerDashboardRequest"
      },
      "PartnerRevenueRequest": {
        "properties": {
          "action": {
            "type": "string",
            "title": "Action"
          },
          "payout_amount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Payout Amount"
          },
          "payment_method": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Payment Method"
          },
          "statement_period": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Statement Period"
          }
        },
        "type": "object",
        "required": [
          "action"
        ],
        "title": "PartnerRevenueRequest"
      },
      "PartnershipApplicationRequest": {
        "properties": {
          "business_type": {
            "type": "string",
            "title": "Business Type"
          },
          "use_case": {
            "type": "string",
            "title": "Use Case"
          },
          "expected_monthly_volume": {
            "type": "integer",
            "title": "Expected Monthly Volume"
          },
          "company_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Company Name"
          },
          "website_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Website Url"
          },
          "portfolio_urls": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Portfolio Urls"
          }
        },
        "type": "object",
        "required": [
          "business_type",
          "use_case",
          "expected_monthly_volume"
        ],
        "title": "PartnershipApplicationRequest"
      },
      "ProjectPromptRequest": {
        "properties": {
          "action": {
            "type": "string",
            "title": "Action"
          },
          "prompt_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Prompt Ids"
          },
          "order_positions": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "integer"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Positions"
          }
        },
        "type": "object",
        "required": [
          "action",
          "prompt_ids"
        ],
        "title": "ProjectPromptRequest"
      },
      "PromptAnalysisRequest": {
        "properties": {
          "prompt_text": {
            "type": "string",
            "maxLength": 10000,
            "minLength": 1,
            "title": "Prompt Text"
          },
          "session_history": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "maxItems": 10
              },
              {
                "type": "null"
              }
            ],
            "title": "Session History"
          },
          "context": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Context"
          }
        },
        "type": "object",
        "required": [
          "prompt_text"
        ],
        "title": "PromptAnalysisRequest"
      },
      "PromptAnalysisResponse": {
        "properties": {
          "analysis_id": {
            "type": "string",
            "title": "Analysis Id"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp"
          },
          "prompt_metrics": {
            "additionalProperties": true,
            "type": "object",
            "title": "Prompt Metrics"
          },
          "detected_patterns": {
            "additionalProperties": true,
            "type": "object",
            "title": "Detected Patterns"
          },
          "suggestions": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Suggestions"
          },
          "optimization_tips": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Optimization Tips"
          },
          "quality_score": {
            "additionalProperties": true,
            "type": "object",
            "title": "Quality Score"
          },
          "processing_time": {
            "type": "number",
            "title": "Processing Time"
          }
        },
        "type": "object",
        "required": [
          "analysis_id",
          "timestamp",
          "prompt_metrics",
          "detected_patterns",
          "suggestions",
          "optimization_tips",
          "quality_score",
          "processing_time"
        ],
        "title": "PromptAnalysisResponse"
      },
      "PromptRatingRequest": {
        "properties": {
          "prompt_id": {
            "type": "string",
            "title": "Prompt Id"
          },
          "rating": {
            "type": "integer",
            "maximum": 5,
            "minimum": 1,
            "title": "Rating"
          },
          "review_title": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Review Title"
          },
          "review_content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Review Content"
          },
          "pros": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Pros",
            "default": []
          },
          "cons": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Cons",
            "default": []
          },
          "would_recommend": {
            "type": "boolean",
            "title": "Would Recommend",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "prompt_id",
          "rating"
        ],
        "title": "PromptRatingRequest"
      },
      "QuickContextRequest": {
        "properties": {
          "prompt_text": {
            "type": "string",
            "maxLength": 2000,
            "minLength": 1,
            "title": "Prompt Text"
          },
          "domain_hint": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Domain Hint"
          }
        },
        "type": "object",
        "required": [
          "prompt_text"
        ],
        "title": "QuickContextRequest"
      },
      "RemixRequest": {
        "properties": {
          "prompt_body": {
            "type": "string",
            "title": "Prompt Body"
          }
        },
        "type": "object",
        "required": [
          "prompt_body"
        ],
        "title": "RemixRequest"
      },
      "SavePromptRequest": {
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 100,
            "minLength": 3,
            "title": "Title"
          },
          "body": {
            "type": "string",
            "minLength": 1,
            "title": "Body"
          },
          "role": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Role"
          }
        },
        "type": "object",
        "required": [
          "title",
          "body",
          "role"
        ],
        "title": "SavePromptRequest"
      },
      "TestDriveByIdRequest": {
        "properties": {
          "prompt_id": {
            "type": "string",
            "title": "Prompt Id"
          },
          "inputs": {
            "additionalProperties": true,
            "type": "object",
            "title": "Inputs",
            "default": {

            }
          }
        },
        "type": "object",
        "required": [
          "prompt_id"
        ],
        "title": "TestDriveByIdRequest"
      },
      "UpdatePromptRequest": {
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 100,
            "minLength": 3,
            "title": "Title"
          },
          "body": {
            "type": "string",
            "minLength": 1,
            "title": "Body"
          },
          "role": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Role"
          }
        },
        "type": "object",
        "required": [
          "title",
          "body"
        ],
        "title": "UpdatePromptRequest"
      },
      "UpgradeRequest": {
        "properties": {
          "text": {
            "type": "string",
            "maxLength": 16000,
            "minLength": 1,
            "title": "Text"
          },
          "mode": {
            "type": "string",
            "title": "Mode",
            "default": "free"
          },
          "client": {
            "type": "string",
            "title": "Client",
            "default": "unknown"
          },
          "intent": {
            "type": "string",
            "title": "Intent",
            "default": "unknown"
          },
          "meta": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Meta"
          },
          "explain": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Explain",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "text"
        ],
        "title": "UpgradeRequest"
      },
      "UpgradeResponse": {
        "properties": {
          "upgraded": {
            "type": "string",
            "title": "Upgraded"
          },
          "matched_pipeline": {
            "type": "string",
            "title": "Matched Pipeline"
          },
          "engine_version": {
            "type": "string",
            "title": "Engine Version"
          },
          "plan": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Plan"
          },
          "diffs": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Diffs"
          },
          "fidelity_score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fidelity Score"
          },
          "matched_entries": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Matched Entries"
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message"
          }
        },
        "type": "object",
        "required": [
          "upgraded",
          "matched_pipeline",
          "engine_version"
        ],
        "title": "UpgradeResponse"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "HTTPBearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Enter your Firebase ID token (without 'Bearer ' prefix)"
      }
    }
  }
}